{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ESP32 MCU EDGE INTELLIGENCE NODE","text":"<p>This project dedicates to the development of a MCU edge intelligence node based on ESP32. If you are interested in this project, please star it and stay tuned.</p> <p></p>"},{"location":"ARCHITECTURE/architecture/","title":"ARCHITECTURE","text":""},{"location":"ARCHITECTURE/architecture/#hardware-architecture","title":"HARDWARE ARCHITECTURE","text":"<p>MAIN CONTROL + PERCEPTION + COMMUNICATION + INTERFACING</p>"},{"location":"ARCHITECTURE/architecture/#software-architecture","title":"SOFTWARE ARCHITECTURE","text":"<p>HARDWARE LAYER + PLATFORM ABSTRACTION LAYER + SYSTEM SERVICES LAYER + APPLICATION LAYER</p> <pre><code>+------------------------------+\n| Application Layer            | &lt;-- Application Code\n+------------------------------+\n| System Services Layer        | &lt;-- OS + Middleware\n+------------------------------+\n| Platform Abstraction Layer   | &lt;-- Startup Code + HAL (register-level) + BSP (board-level)\n+------------------------------+\n| Hardware Layer               | &lt;-- Main Control + Peripherals\n+------------------------------+\n</code></pre>"},{"location":"COMMUNICATION/communication/","title":"COMMUNICATION","text":""},{"location":"ESP32/ESP32/","title":"ESPRESSIF SYSTEMS","text":"<p>Info</p> <p>Espressif Systems is a semiconductor company based in China, known for developing low-power wireless solutions, including Wi-Fi and Bluetooth modules and SoCs (System on Chips). Their products, such as the ESP8266 and ESP32 series, have gained popularity in IoT, embedded systems, and wireless communication due to their low cost, power efficiency, and ease of use. Espressif provides a range of development tools and software support, making their products widely adopted by developers and engineers in various industries.</p>"},{"location":"ESP32/ESP_IDF/esp_idf/","title":"ESPRESSIF IOT DEVELOPMENT FRAMEWORK (ESP-IDF)","text":"<p>Info</p> <p>ESP-IDF (Espressif IoT Development Framework) is the official development framework for the ESP32 series chips from Espressif. It provides a comprehensive set of tools and libraries to help developers create robust applications for ESP32-based devices. ESP-IDF supports FreeRTOS, Wi-Fi, Bluetooth, and a wide range of peripherals. It is compatible with the GCC toolchain and supports multiple languages like C and C++. The framework includes components for networking, security, power management, and driver development, making it suitable for a wide range of IoT applications.</p> <p>Note</p> <p>There are two ways to use ESP-IDF: ESP-IDF Command Prompt and GUI-based IDEs like Visual Studio Code. The latter is the most popular way to use ESP-IDF.</p>"},{"location":"ESP32/ESP_IDF/esp_idf/#setup","title":"SETUP","text":"<p>Note</p> <p>In terms of interfacing manner, there are three ways to use ESP-IDF:</p> <ul> <li> <p>ESP-IDF Command Prompt: This is the default way to use ESP-IDF. It is a command-line interface that provides access to the tools and utilities required for ESP-IDF development.</p> </li> <li> <p>ESP-IDF IDE: This is an integrated development environment that provides a graphical interface for ESP-IDF development. It includes tools like the ESP-IDF Command Prompt, a text editor, and a project manager.</p> </li> <li> <p>IDE Plugins: These are plugins that integrate ESP-IDF with popular IDEs like Visual Studio Code and Eclipse. They provide features like code completion, syntax highlighting, and debugging support. This is the most popular way to use ESP-IDF.</p> </li> </ul> <ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Portal </p> </li> <li> <p> How to Install the ESP-IDF Toolchain on Ubuntu \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Portal </p> </li> </ul>"},{"location":"ESP32/ESP_IDF/esp_idf/#official-guide","title":"OFFICIAL GUIDE","text":""},{"location":"ESP32/ESP_IDF/esp_idf/#online-documentation","title":"Online Documentation","text":"<ul> <li> <p> ESP-IDF Programming Guide \ud83c\udfaf\ud83c\udfc6</p> <p>  Portal </p> </li> </ul>"},{"location":"ESP32/MICROPYTHON/micropython/","title":"MICROPYTHON","text":"<p>Info</p> <p>For ESP32 development, MICROPYTHON is actually also based on ESP_IDF. Compared to ESP_IDF, MICROPYTHON is more suitable for rapid prototyping and development, yet it has lower efficiency and fewer resources.</p>"},{"location":"ESP32/MICROPYTHON/micropython/#esp32-micropython-programming","title":"ESP32 MICROPYTHON PROGRAMMING","text":"<p>For ESP32 development using MICROPYTHON, we have two major steps:</p> <ol> <li>Prepare and Install MICROPYTHON firmware on ESP32. (Sometimes, we need to customize the firmware for specific applications.)</li> <li>Develop and Run MICROPYTHON scripts on ESP32.</li> </ol> <ul> <li> <p> MICROPYTHON DEV IDE</p> <p>VSCODE + MICROPYTHON</p> <p>  Portal </p> </li> </ul>"},{"location":"ESP32/MICROPYTHON/micropython/#micropython-introduction","title":"MICROPYTHON INTRODUCTION","text":"<p>MICROPYTHON is a lean and efficient implementation of the Python 3 programming language that includes a small subset of the Python standard library and is optimized to run on microcontrollers and in constrained environments. It is designed to be easily ported to new microcontroller architectures. MICROPYTHON is a full Python compiler and runtime that runs on the microcontroller hardware. It is designed to be easy to use and understand, and it is especially suitable for rapid prototyping and development.</p>"},{"location":"ESP32/MICROPYTHON/micropython/#micropython-features","title":"MICROPYTHON FEATURES","text":"<ul> <li>Python 3 Syntax: MICROPYTHON is based on Python 3 syntax, which is easy to learn and use.</li> <li>Interactive REPL: MICROPYTHON provides an interactive REPL (Read-Eval-Print Loop) for quick testing and debugging.</li> <li>Microcontroller Support: MICROPYTHON supports a wide range of microcontroller architectures, including ARM, ESP32, and ESP8266.</li> <li>Extensible Modules: MICROPYTHON allows you to extend its functionality by adding custom modules.</li> <li>Cross-Platform Support: MICROPYTHON is cross-platform and can run on Windows, macOS, and Linux.</li> <li>Open Source: MICROPYTHON is open-source software, which means you can modify and distribute it freely.</li> <li>Community Support: MICROPYTHON has a large and active community that provides support and resources for developers.</li> <li>Rapid Development: MICROPYTHON enables rapid prototyping and development of embedded systems and IoT applications.</li> <li>Low Resource Usage: MICROPYTHON is designed to run on microcontrollers with limited resources, making it suitable for constrained environments.</li> <li>Built-in Libraries: MICROPYTHON includes a set of built-in libraries for common tasks, such as networking, file I/O, and hardware interfacing.</li> <li>Portability: MICROPYTHON is designed to be easily ported to new microcontroller architectures, allowing you to reuse your code across different platforms.</li> <li>Memory Management: MICROPYTHON provides automatic memory management, which simplifies memory allocation and deallocation.</li> <li>Garbage Collection: MICROPYTHON includes a garbage collector that automatically reclaims memory that is no longer in use.</li> <li>Hardware Abstraction Layer (HAL): MICROPYTHON provides a hardware abstraction layer that allows you to write platform-independent code.</li> <li>Low-Level Access: MICROPYTHON allows you to access low-level hardware features directly, giving you more control over the hardware.</li> <li>Real-Time Operating System (RTOS) Support: MICROPYTHON supports real-time operating systems, such as FreeRTOS, for multitasking and scheduling.</li> <li>Firmware Updates: MICROPYTHON allows you to update the firmware of your microcontroller over the air (OTA) using Wi-Fi or Bluetooth.</li> </ul>"},{"location":"ESP32/MICROPYTHON/micropython/#official-resources","title":"OFFICIAL RESOURCES","text":"<ul> <li> <p> MICROPYTHON WEBSITE</p> <p>Official website of MICROPYTHON.</p> <p>  Portal </p> </li> <li> <p> MICROPYTHON GITHUB</p> <p>Official GitHub repository of MICROPYTHON.</p> <p>  Portal </p> </li> <li> <p> MICROPYTHON DOCUMENTATION</p> <p>Official documentation of MICROPYTHON.</p> <p>  Portal </p> </li> </ul>"},{"location":"ESP32/MICROPYTHON/micropython/#third-party-resources","title":"THIRD PARTY RESOURCES","text":"<ul> <li> <p> PRECHIN ESP32 DEV \ud83c\udfaf\ud83c\udfc6</p> <p>  Portal </p> </li> </ul>"},{"location":"INSTRUCTIONS/instructions/","title":"PROJECT INSTRUCTIONS","text":"<p>Note</p> <p>This section details the how the node is built and how it should be used.</p>"},{"location":"INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/","title":"PROJECT FRAMEWORK","text":""},{"location":"INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/#overview","title":"Overview","text":"<p>Project Framework</p> <p>After completing the project initialization, we also need to reorganize and sort the generated project to better support our project development. This section will introduce how to reorganize and sort the project.</p>"},{"location":"INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/#project-framework_1","title":"Project Framework","text":"<p>In this project, the project code organization structure is as follows:</p> <pre><code>project-name/\n\u251c\u2500\u2500 CMakeLists.txt          # Top-level build file for the project\n\u251c\u2500\u2500 partitions-16MiB.csv    # Partition table\n\u251c\u2500\u2500 sdkconfig               # Current configuration file\n\u251c\u2500\u2500 sdkconfig.old           # Old configuration file for reference\n\u251c\u2500\u2500 main/                   # Main application code\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # Build file for the main directory\n\u2502   \u251c\u2500\u2500 main.c              # Entry point of the application\n\u2502   \u2514\u2500\u2500 app/                # Application logic\n\u2502       \u251c\u2500\u2500 app.c           # Application layer implementation\n\u2502       \u251c\u2500\u2500 app.h           # Header file for application interface\n\u2502       \u2514\u2500\u2500 ...             # Additional files\n\u251c\u2500\u2500 components/             # Peripheral modules\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # Build file for components\n\u2502   \u251c\u2500\u2500 led/                # LED module\n\u2502   \u2502   \u251c\u2500\u2500 led.c           # Implementation of LED module\n\u2502   \u2502   \u251c\u2500\u2500 led.h           # Header file for LED module\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 rgb/                # RGB module\n\u2502   \u2502   \u251c\u2500\u2500 rgb.c           # Implementation of RGB module\n\u2502   \u2502   \u251c\u2500\u2500 rgb.h           # Header file for RGB module\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 sensor/             # Sensor module\n\u2502   \u2502   \u251c\u2500\u2500 sensor.c        # Implementation of sensor module\n\u2502   \u2502   \u251c\u2500\u2500 sensor.h        # Header file for sensor module\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...                 # Additional peripheral modules\n\u251c\u2500\u2500 tinyshm/                # TinySHM framework\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # Build file for TinySHM\n\u2502   \u251c\u2500\u2500 data_processing/    # Data processing module\n\u2502   \u2502   \u251c\u2500\u2500 data_proc.c     # Implementation of data processing\n\u2502   \u2502   \u251c\u2500\u2500 data_proc.h     # Header file for data processing\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 fault_detection/    # Fault detection module\n\u2502   \u2502   \u251c\u2500\u2500 fault_detect.c  # Implementation of fault detection\n\u2502   \u2502   \u251c\u2500\u2500 fault_detect.h  # Header file for fault detection\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 sensor_integration/ # Sensor integration module\n\u2502   \u2502   \u251c\u2500\u2500 sensor_integ.c  # Implementation of sensor integration\n\u2502   \u2502   \u251c\u2500\u2500 sensor_integ.h  # Header file for sensor integration\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...                 # Additional modules\n\u251c\u2500\u2500 build/                  # Build directory (auto-generated)\n\u2502   \u2514\u2500\u2500 ...                 # Files generated during the build process\n\u2514\u2500\u2500 README.md               # Project documentation\n</code></pre> <p>Note</p> <ul> <li>main folder: main application code + user code inside the app folder</li> <li>components folder: peripheral module BSP, low-level oriented.</li> <li>tinyshm folder: TinySHM framework code, high-level oriented.</li> <li>build folder: auto-generated build directory.</li> </ul>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/","title":"PROJECT INITIALIZATION","text":""},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#environment-setup","title":"ENVIRONMENT SETUP","text":"<p>Info</p> <p>We use VSCode + ESP-IDF for development. Details to setup the development environment can be found on the internet. I assume you have already set up the development environment.</p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#create-a-new-project","title":"CREATE A NEW PROJECT","text":"<ol> <li>Launch VSCode and then open the command palette by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS).</li> <li>Type <code>ESP-IDF: New Project</code> and press <code>Enter</code>. </li> <li>Enter the project configuration UI and fill in the required information. </li> <li>Choose a template to create a new project. </li> <li>Open in a new window.  </li> </ol>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#templated-project-structure","title":"TEMPLATED PROJECT STRUCTURE","text":"<pre><code>sample_proj/ # Project root directory\n\u251c\u2500\u2500 CMakeLists.txt # Project CMake configuration file\n\u251c\u2500\u2500 main/ # Main application directory\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # Application CMake configuration file\n\u2502   \u2514\u2500\u2500 main.c # Application source file\n\u2514\u2500\u2500 sdkconfig # Project configuration file\n</code></pre>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#project-configuration","title":"PROJECT CONFIGURATION","text":"<p>Note</p> <p>This step is to configure the project settings to maximize the power of the hardware, i.e., use target-specific configurations rather than default configurations.</p> <p>Warning</p> <p>Before you open the project configuration UI, make sure you have the project open in VSCode, set the target to your board, and have the ESP-IDF extension installed.</p> <ol> <li>Enter the project configuration UI by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS) and type <code>ESP-IDF: Configure Project</code>. Alternatively, one can click the gear icon on the bottom menu of the VSCode window. </li> <li>'FLASH' configuration. In the search bar, type <code>flash</code> and press <code>Enter</code>.  </li> <li>'Partition Table' configuration. In the search bar, type <code>partition</code> and press <code>Enter</code>.  details to be provided later</li> <li>'PSRAM' configuration. In the search bar, type <code>psram</code> and press <code>Enter</code>. </li> <li>Change the CPU frequency. In the search bar, type <code>cpu</code> and press <code>Enter</code>. Modify the CPU frequency to 240 MHz. </li> <li>Modify the FreeRTOS tick clock frequency. In the search bar, type <code>tick</code> and press <code>Enter</code>. Modify the tick clock frequency to 1000 Hz. </li> <li>Modify the partition table. In the command palette, type <code>ESP-IDF: Open Partition Table Editor UI</code>. </li> <li>Modify the partition table as shown below. </li> <li>Save the all the modifications.</li> </ol> <p>By far, we have finished the project initialization. The configuration is now consistent with the hardware onboard resources. </p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#template-program","title":"TEMPLATE PROGRAM","text":"<p>Now, let's create a simple program to test the board. </p> <p>Go to the main.c file and replace the content with the following code:</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>Then, ensure the serial port number is corrrect, the target board is selected, then click the \"fire flame\" icon to build, flash and monitor the program. Then, you should be able to see the printouts on the serial monitor. </p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#conclusions","title":"CONCLUSIONS","text":"<p>Note</p> <p>This project sets up the minimal system development board DNESP32S3M, and this project can serve as a useful template for future development. Compared to STM32, many low level details are hidden from the user, therefore the set up process is much simpler.</p>"},{"location":"INTERFACING/interfacing/","title":"INTERFACING","text":""},{"location":"INTERFACING/LED/led/","title":"LED","text":""},{"location":"INTERFACING/LED/led/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we will talk about the onboard LED light on the DNESP32S3M development board.</p> <p></p>"},{"location":"INTERFACING/LED/led/#overview","title":"Overview","text":"<p>In the project, we created a new directory named <code>LED</code> under the <code>components</code> directory to store the LED driver code, including the <code>led.h</code> and <code>led.c</code> files.</p>"},{"location":"INTERFACING/LED/led/#pin-configuration","title":"Pin Configuration","text":"<p>According to the schematic, the onboard LED light is connected to GPIO1.</p> <p></p>"},{"location":"INTERFACING/LED/led/#code","title":"Code","text":""},{"location":"INTERFACING/LED/led/#ledh","title":"LED.h","text":"<pre><code>/**\n * @file led.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief The led here indicates the onboard red led on the Alientek DNESP32S3M minimal development board.\n * @version 1.0\n * @date 2024-11-16\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __LED_H__\n#define __LED_H__\n\n/* Dependencies */\n#include \"driver/gpio.h\"\n\n/* GPIO Pin Definition */\n#define LED_GPIO_PIN    GPIO_NUM_1  /* GPIO port connected to LED */\n\n/* GPIO States */\n#define LED_PIN_RESET       0\n#define LED_PIN_SET         1\n\n/**\n * @brief       Initialize the LED\n * @param       None\n * @retval      None\n */\nvoid led_init(void);\n\n/**\n * @brief       Control the LED\n * @param       x: 1 for on, 0 for off\n * @retval      None\n */\nvoid led(int x);\n\n/**\n * @brief       Toggle the LED\n * @param       None\n * @retval      None\n */\nvoid led_toggle(void);\n\n#endif\n</code></pre>"},{"location":"INTERFACING/LED/led/#ledc","title":"LED.c","text":"<pre><code>/**\n * @file led.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief The led here indicates the onboard red led on the Alientek DNESP32S3M minimal development board.\n * @version 1.0\n * @date 2024-11-16\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n#include \"led.h\"\n\n/**\n * @brief       Initialize the LED\n * @param       None\n * @retval      None\n */\nvoid led_init(void)\n{\n    gpio_config_t gpio_init_struct = {0};\n\n    gpio_init_struct.intr_type = GPIO_INTR_DISABLE;         /* Disable GPIO interrupt */\n    gpio_init_struct.mode = GPIO_MODE_INPUT_OUTPUT;         /* Set GPIO mode to input-output */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;       /* Enable pull-up resistor */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;  /* Disable pull-down resistor */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; LED_GPIO_PIN;   /* Set pin bit mask for the configured pin */\n    gpio_config(&amp;gpio_init_struct);                         /* Configure GPIO */\n\n    led(1); /* Turn on the LED */\n}\n\n/**\n * @brief       Control the LED\n * @param       x: 1 for on, 0 for off\n * @retval      None\n */\nvoid led(int x)\n{\n    if(x)\n    {\n        gpio_set_level(LED_GPIO_PIN, LED_PIN_RESET);\n    }\n    else\n    {\n        gpio_set_level(LED_GPIO_PIN, LED_PIN_SET);\n    }\n}\n\n/**\n * @brief       Toggle the LED\n * @param       None\n * @retval      None\n */\nvoid led_toggle(void)\n{\n    gpio_set_level(LED_GPIO_PIN, !gpio_get_level(LED_GPIO_PIN));\n}\n</code></pre>"},{"location":"INTERFACING/LED/led/#core-functions","title":"Core Functions","text":""},{"location":"INTERFACING/LED/led/#led_init","title":"led_init()","text":"<p>Note</p> <p>\u521d\u59cb\u5316LED\u706f\u3002</p>"},{"location":"INTERFACING/LED/led/#led_1","title":"led()","text":"<p>Note</p> <p>\u63a7\u5236LED\u706f\u3002</p>"},{"location":"INTERFACING/LED/led/#led_toggle","title":"led_toggle()","text":"<p>Note</p> <p>\u7ffb\u8f6cLED\u706f\u3002</p>"},{"location":"INTERFACING/RGB/rgb/","title":"RGB LED","text":""},{"location":"INTERFACING/RGB/rgb/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we will talk about the onboard RGB LED light on the DNESP32S3M development board.</p>"},{"location":"INTERFACING/RGB/rgb/#overview","title":"Overview","text":"<p>In the project, we created a new directory named <code>RGB</code> under the <code>components</code> directory to store the RGB LED driver code, including the <code>rgb.h</code> and <code>rgb.c</code> files.</p>"},{"location":"INTERFACING/RGB/rgb/#pin-configuration","title":"Pin Configuration","text":"<p>Please refer to the following table for the connection.</p> RGB LED Module Pin Main Control Pin R GPIO_NUM_19 G GPIO_NUM_20 B GPIO_NUM_21 GND GND <p></p>"},{"location":"INTERFACING/RGB/rgb/#code","title":"Code","text":""},{"location":"INTERFACING/RGB/rgb/#rgbh","title":"RGB.h","text":"<pre><code>/**\n * @file rgb.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This driver can be used for external RGB LED modules.\n * @version 1.0\n * @date 2024-11-16\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __RGB_H__\n#define __RGB_H__\n\n/* Dependencies */\n#include \"driver/gpio.h\"\n\n/* GPIO Pin Definition */\n#define RGB_R_GPIO_PIN  GPIO_NUM_19  /* GPIO port connected to RGB Red */\n#define RGB_G_GPIO_PIN  GPIO_NUM_20  /* GPIO port connected to RGB Green */\n#define RGB_B_GPIO_PIN  GPIO_NUM_21  /* GPIO port connected to RGB Blue */\n\n/* GPIO States */\n#define RGB_PIN_RESET   0\n#define RGB_PIN_SET     1\n\n/**\n * @brief       Initialize the RGB LED\n * @param       None\n * @retval      None\n */\nvoid rgb_init(void);\n\n/**\n * @brief       Control the RGB LED\n * @param       r: 1 for on, 0 for off\n * @param       g: 1 for on, 0 for off\n * @param       b: 1 for on, 0 for off\n * @retval      None\n */\nvoid rgb(int r, int g, int b);\n\n/**\n * @brief       Toggle the RGB LED\n * @param       None\n * @retval      None\n */\nvoid rgb_toggle(void);\n\n#endif\n</code></pre>"},{"location":"INTERFACING/RGB/rgb/#rgbc","title":"RGB.c","text":"<pre><code>/**\n * @file rgb.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This driver can be used for external RGB LED modules.\n * @version 1.0\n * @date 2024-11-16\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n#include \"rgb.h\"\n\n/**\n * @brief       Initialize the RGB LED\n * @param       None\n * @retval      None\n */\nvoid rgb_init(void)\n{\n    gpio_config_t gpio_init_struct = {0};\n\n    gpio_init_struct.intr_type = GPIO_INTR_DISABLE;         /* Disable GPIO interrupt */\n    gpio_init_struct.mode = GPIO_MODE_INPUT_OUTPUT;         /* Set GPIO mode to input-output */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;       /* Enable pull-up resistor */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;  /* Disable pull-down resistor */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; RGB_R_GPIO_PIN; /* Set pin bit mask for the configured pin */\n    gpio_init_struct.pin_bit_mask |= 1ull &lt;&lt; RGB_G_GPIO_PIN; /* Set pin bit mask for the configured pin */\n    gpio_init_struct.pin_bit_mask |= 1ull &lt;&lt; RGB_B_GPIO_PIN; /* Set pin bit mask for the configured pin */\n    gpio_config(&amp;gpio_init_struct);                         /* Configure GPIO */\n\n    rgb(1, 1, 1); /* Turn on the RGB LED */\n}\n\n/**\n * @brief       Control the RGB LED\n * @param       r: 1 for on, 0 for off\n * @param       g: 1 for on, 0 for off\n * @param       b: 1 for on, 0 for off\n * @retval      None\n */\nvoid rgb(int r, int g, int b)\n{\n    if(r)\n    {\n        gpio_set_level(RGB_R_GPIO_PIN, RGB_PIN_SET);\n    }\n    else\n    {\n        gpio_set_level(RGB_R_GPIO_PIN, RGB_PIN_RESET);\n    }\n\n    if(g)\n    {\n        gpio_set_level(RGB_G_GPIO_PIN, RGB_PIN_SET);\n    }\n    else\n    {\n        gpio_set_level(RGB_G_GPIO_PIN, RGB_PIN_RESET);\n    }\n\n    if(b)\n    {\n        gpio_set_level(RGB_B_GPIO_PIN, RGB_PIN_SET);\n    }\n    else\n    {\n        gpio_set_level(RGB_B_GPIO_PIN, RGB_PIN_RESET);\n    }\n}\n\n/**\n * @brief       Toggle the RGB LED\n * @param       None\n * @retval      None\n */\nvoid rgb_toggle(void)\n{\n    gpio_set_level(RGB_R_GPIO_PIN, !gpio_get_level(RGB_R_GPIO_PIN));\n    gpio_set_level(RGB_G_GPIO_PIN, !gpio_get_level(RGB_G_GPIO_PIN));\n    gpio_set_level(RGB_B_GPIO_PIN, !gpio_get_level(RGB_B_GPIO_PIN));\n}\n</code></pre>"},{"location":"INTERFACING/RGB/rgb/#core-functions","title":"Core Functions","text":""},{"location":"INTERFACING/RGB/rgb/#rgb_init","title":"rgb_init()","text":"<p>Note</p> <p>Initialize the RGB LED.</p>"},{"location":"INTERFACING/RGB/rgb/#rgbint-r-int-g-int-b","title":"rgb(int r, int g, int b)","text":"<p>Note</p> <p>Control the RGB LED.</p>"},{"location":"INTERFACING/RGB/rgb/#rgb_toggle","title":"rgb_toggle()","text":"<p>Note</p> <p>Toggle the RGB LED.</p>"},{"location":"MAIN-CONTROL/HARDWARE/hardware/","title":"HARDWARE","text":"<p>DNESP32S3M</p> <p>The hardware platform used in this document is the DNESP32S3M from Alientek\uff0c which is based on ESP32-S3, as shown in the figure above. It should be possible to migrate the relevant programs to other development boards, but adaptation should be made according to the actual situation.</p> <p></p> <p></p> <p>DNESP32S3M Hardware Features</p> <p>ESP32-S3 is a system on a chip that integrates the following features:</p> <ul> <li> <p>Wi-Fi (2.4 GHz band)</p> </li> <li> <p>Bluetooth Low Energy</p> </li> <li> <p>Dual high performance Xtensa\u00ae 32-bit LX7 CPU cores</p> </li> <li> <p>Ultra Low Power co-processor running either RISC-V or FSM core</p> </li> <li> <p>Multiple peripherals</p> </li> <li> <p>Built-in security hardware</p> </li> <li> <p>USB OTG interface</p> </li> <li> <p>USB Serial/JTAG Controller</p> </li> </ul> <p>Powered by 40 nm technology, ESP32-S3 provides a robust, highly integrated platform, which helps meet   the continuous demands for efficient power usage, compact design, security, high performance, and     reliability.</p> <p>Espressif provides basic hardware and software resources to help application developers realize their   ideas using the ESP32-S3 series hardware. The software development framework by Espressif is intended     for development of Internet-of-Things (IoT) applications with Wi-Fi, Bluetooth, power management and    several other system features.</p> <p></p> <p></p>"},{"location":"PERCEPTION/perception/","title":"SENSING","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"zh/","title":"ESP32\u5fae\u63a7\u5236\u5668\u8fb9\u7f18\u667a\u80fd\u8282\u70b9","text":"<p>\u8fd9\u4e2a\u9879\u76ee\u81f4\u529b\u4e8e\u57fa\u4e8eESP32\u7684\u5fae\u63a7\u5236\u5668\u8fb9\u7f18\u667a\u80fd\u8282\u70b9\u7684\u5f00\u53d1\u3002\u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a\u9879\u76ee\u611f\u5174\u8da3\uff0c\u8bf7\u7ed9\u5b83\u70b9\u4e2a\u8d5e\u5e76\u4fdd\u6301\u5173\u6ce8\u3002</p> <p></p>"},{"location":"zh/ARCHITECTURE/architecture/","title":"\u67b6\u6784","text":""},{"location":"zh/ARCHITECTURE/architecture/#_2","title":"\u786c\u4ef6\u67b6\u6784","text":"<p>\u4e3b\u63a7 + \u611f\u77e5 + \u901a\u4fe1 + \u4ea4\u4e92</p>"},{"location":"zh/ARCHITECTURE/architecture/#_3","title":"\u8f6f\u4ef6\u67b6\u6784","text":"<p>\u786c\u4ef6\u5c42 + \u5e73\u53f0\u62bd\u8c61\u5c42 + \u7cfb\u7edf\u670d\u52a1\u5c42 + \u5e94\u7528\u5c42</p> <pre><code>+----------------------------------------+\n| \u5e94\u7528\u5c42 (Application Layer)              | &lt;-- \u5e94\u7528\u4ee3\u7801\n+----------------------------------------+\n| \u7cfb\u7edf\u670d\u52a1\u5c42 (System Services Layer)      | &lt;-- \u64cd\u4f5c\u7cfb\u7edf + \u4e2d\u95f4\u4ef6\n+----------------------------------------+\n| \u5e73\u53f0\u62bd\u8c61\u5c42 (Platform Abstraction Layer) | &lt;-- \u542f\u52a8\u4ee3\u7801 + \u786c\u4ef6\u62bd\u8c61\u5c42 (\u5bc4\u5b58\u5668\u7ea7) + \u677f\u7ea7\u652f\u6301\u5305 (\u5f00\u53d1\u677f\u7ea7)\n+----------------------------------------+\n| \u786c\u4ef6\u5c42 (Hardware Layer)                 | &lt;-- \u4e3b\u63a7\u5355\u5143 + \u5916\u8bbe\n+----------------------------------------+\n</code></pre>"},{"location":"zh/COMMUNICATION/communication/","title":"\u901a\u4fe1","text":""},{"location":"zh/ESP32/ESP32/","title":"\u4e50\u946b\u79d1\u6280","text":"<p>Info</p> <p>\u4e50\u946b\u79d1\u6280 \u662f\u4e00\u5bb6\u603b\u90e8\u4f4d\u4e8e\u4e2d\u56fd\u7684\u534a\u5bfc\u4f53\u516c\u53f8\uff0c\u4ee5\u5f00\u53d1\u4f4e\u529f\u8017\u65e0\u7ebf\u89e3\u51b3\u65b9\u6848\u95fb\u540d\uff0c\u5305\u62ecWi-Fi\u548c\u84dd\u7259\u6a21\u5757\u4ee5\u53ca\u7cfb\u7edf\u7ea7\u82af\u7247\uff08SoC\uff09\u3002\u5176\u4ea7\u54c1\uff0c\u5982ESP8266\u548cESP32\u7cfb\u5217\uff0c\u56e0\u5176\u4f4e\u6210\u672c\u3001\u8282\u80fd\u548c\u6613\u7528\u6027\u5728\u7269\u8054\u7f51\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u65e0\u7ebf\u901a\u4fe1\u9886\u57df\u5e7f\u53d7\u6b22\u8fce\u3002\u4e50\u946b\u79d1\u6280\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5f00\u53d1\u5de5\u5177\u548c\u8f6f\u4ef6\u652f\u6301\uff0c\u4f7f\u5176\u4ea7\u54c1\u88ab\u4f17\u591a\u5f00\u53d1\u8005\u548c\u5de5\u7a0b\u5e08\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u7c7b\u884c\u4e1a\u4e2d\u3002</p>"},{"location":"zh/ESP32/ESP_IDF/esp_idf/","title":"\u4e50\u946b\u7269\u8054\u7f51\u5f00\u53d1\u6846\u67b6 (ESP-IDF)","text":"<p>Info</p> <p>ESP-IDF\uff08\u4e50\u946b\u7269\u8054\u7f51\u5f00\u53d1\u6846\u67b6\uff09 \u662f\u4e50\u946b\u79d1\u6280\u4e3aESP32\u7cfb\u5217\u82af\u7247\u63d0\u4f9b\u7684\u5b98\u65b9\u5f00\u53d1\u6846\u67b6\u3002\u5b83\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u6574\u5957\u5de5\u5177\u548c\u5e93\uff0c\u5e2e\u52a9\u521b\u5efa\u57fa\u4e8eESP32\u8bbe\u5907\u7684\u7a33\u5065\u5e94\u7528\u3002ESP-IDF\u652f\u6301FreeRTOS\u3001Wi-Fi\u3001\u84dd\u7259\u4ee5\u53ca\u591a\u79cd\u5916\u8bbe\u63a5\u53e3\u3002\u8be5\u6846\u67b6\u517c\u5bb9GCC\u5de5\u5177\u94fe\uff0c\u652f\u6301C\u548cC++\u7b49\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5305\u542b\u7f51\u7edc\u3001\u5b89\u5168\u3001\u529f\u8017\u7ba1\u7406\u548c\u9a71\u52a8\u5f00\u53d1\u7b49\u7ec4\u4ef6\uff0c\u975e\u5e38\u9002\u5408\u5e7f\u6cdb\u7684\u7269\u8054\u7f51\u5e94\u7528\u5f00\u53d1\u3002</p> <p>Note</p> <p>\u4f7f\u7528ESP-IDF\u6709\u4e24\u79cd\u65b9\u5f0f\uff1aESP-IDF\u547d\u4ee4\u63d0\u793a\u7b26 \u548c \u57fa\u4e8eGUI\u7684IDE \uff0c\u5982Visual Studio Code\u3002\u540e\u8005\u662f\u4f7f\u7528ESP-IDF\u6700\u6d41\u884c\u7684\u65b9\u5f0f\u3002</p>"},{"location":"zh/ESP32/ESP_IDF/esp_idf/#_1","title":"\u5b89\u88c5","text":"<p>Note</p> <p>\u5728\u4f7f\u7528\u65b9\u5f0f\u4e0a\uff0c\u6709\u4e09\u79cd\u4f7f\u7528ESP-IDF\u7684\u65b9\u5f0f\uff1a</p> <ul> <li> <p>ESP-IDF\u547d\u4ee4\u63d0\u793a\u7b26\uff1a\u8fd9\u662f\u4f7f\u7528ESP-IDF\u7684\u9ed8\u8ba4\u65b9\u5f0f\u3002\u5b83\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u754c\u9762\uff0c\u63d0\u4f9b\u4e86ESP-IDF\u5f00\u53d1\u6240\u9700\u7684\u5de5\u5177\u548c\u5b9e\u7528\u7a0b\u5e8f\u3002</p> </li> <li> <p>ESP-IDF\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff1a\u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9bESP-IDF\u5f00\u53d1\u56fe\u5f62\u754c\u9762\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002\u5b83\u5305\u62ecESP-IDF\u547d\u4ee4\u63d0\u793a\u7b26\u3001\u6587\u672c\u7f16\u8f91\u5668\u548c\u9879\u76ee\u7ba1\u7406\u5668\u7b49\u5de5\u5177\u3002</p> </li> <li> <p>IDE\u63d2\u4ef6\uff1a\u8fd9\u4e9b\u63d2\u4ef6\u5c06ESP-IDF\u4e0e\u6d41\u884c\u7684IDE\uff08\u5982Visual Studio Code\u548cEclipse\uff09\u96c6\u6210\u3002\u5b83\u4eec\u63d0\u4f9b\u4ee3\u7801\u8865\u5168\u3001\u8bed\u6cd5\u9ad8\u4eae\u548c\u8c03\u8bd5\u652f\u6301\u7b49\u529f\u80fd\u3002\u8fd9\u662f\u4f7f\u7528ESP-IDF\u6700\u6d41\u884c\u7684\u65b9\u5f0f\u3002</p> </li> </ul> <ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528\u4e00\u952e\u5b89\u88c5\u5de5\u5177\u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528 VS Code \u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows\u3001Linux\u3001MacOS) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>Recommended.</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/ESP_IDF/esp_idf/#_2","title":"\u5b98\u65b9\u6307\u5357","text":""},{"location":"zh/ESP32/ESP_IDF/esp_idf/#_3","title":"\u5728\u7ebf\u6587\u6863","text":"<ul> <li> <p> ESP-IDF \u7f16\u7a0b\u6307\u5357 \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/ESP_IDF/esp_idf/#_4","title":"\u89c6\u9891\u6559\u7a0b","text":"<ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011| \u4e50\u946b\u7269\u8054\u7f51\u5f00\u53d1\u6846\u67b6 ESP-IDF \u5f00\u53d1\u5165\u95e8 \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011| \u4e50\u946b AIoT \u5f00\u53d1\u8d44\u6e90\u4e0e\u5e94\u7528\u8bb2\u89e3 \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011| \u57fa\u4e8e\u4e50\u946b ESP32-S3 \u7684 AIoT \u7f16\u7a0b\u5b9e\u6218 \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/ESP_IDF/esp_idf/#_5","title":"\u7b2c\u4e09\u65b9\u6559\u7a0b","text":"<ul> <li> <p> DURUOFU \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> LEARNEPS32 \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u5b64\u72ec\u7684\u4e8c\u8fdb\u5236 ESP-IDF \u6559\u7a0b \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u30102024\u6700\u65b0\u7248 ESP32\u6559\u7a0b\uff08\u57fa\u4e8eESP-IDF\uff09\u3011ESP32\u5165\u95e8\u7ea7\u5f00\u53d1\u8bfe\u7a0b \u66f4\u65b0\u4e2d \u4e2d\u6587\u5b57\u5e55 \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/ESP_IDF/esp_idf/#freertos","title":"FREERTOS","text":"<p>\u7531\u4e8eESP-IDF\u662f\u57fa\u4e8eFreeRTOS\u7684\uff0c\u56e0\u6b64\u5b66\u4e60FreeRTOS\u5bf9\u4e8e\u7406\u89e3ESP-IDF\u975e\u5e38\u91cd\u8981\u3002</p> <ul> <li> <p> ESP32_freeRTOS\u6559\u7a0b \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u5b64\u72ec\u7684\u4e8c\u8fdb\u5236 FREERTOS \u6559\u7a0b</p> <p>\u57fa\u4e8eArduinoIDE</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/MICROPYTHON/micropython/","title":"MICROPYTHON","text":"<p>Info</p> <p>\u5bf9\u4e8e ESP32 \u5f00\u53d1\uff0cMICROPYTHON \u5b9e\u9645\u4e0a\u4e5f\u662f\u57fa\u4e8e ESP_IDF \u7684\u3002\u4e0e ESP_IDF \u76f8\u6bd4\uff0cMICROPYTHON \u66f4\u9002\u5408\u5feb\u901f\u539f\u578b\u8bbe\u8ba1\u548c\u5f00\u53d1\uff0c\u4f46\u6548\u7387\u8f83\u4f4e\uff0c\u8d44\u6e90\u8f83\u5c11\u3002</p>"},{"location":"zh/ESP32/MICROPYTHON/micropython/#esp32-micropython","title":"ESP32 MICROPYTHON \u7f16\u7a0b","text":"<p>\u5bf9\u4e8e\u4f7f\u7528micropython\u7684ESP32\u7f16\u7a0b\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u4e3b\u8981\u6b65\u9aa4\uff1a</p> <ol> <li>\u51c6\u5907\u548c\u5b89\u88c5micropython\u56fa\u4ef6\u3002\u6709\u65f6\u5019\u9700\u8981\u5b9a\u5236\u56fa\u4ef6\u4ee5\u652f\u6301\u7279\u5b9a\u7684\u786c\u4ef6\u529f\u80fd\u3002</li> <li>\u5f00\u53d1\u548c\u8fd0\u884cmicropython\u811a\u672c\u3002</li> </ol> <ul> <li> <p> MICROPYTHON DEV IDE</p> <p>VSCODE + MICROPYTHON</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/MICROPYTHON/micropython/#micropython_1","title":"MICROPYTHON \u7b80\u4ecb","text":"<p>MICROPYTHON \u662f Python 3 \u7f16\u7a0b\u8bed\u8a00\u7684\u7cbe\u7b80\u9ad8\u6548\u5b9e\u73b0\uff0c\u5305\u542b Python \u6807\u51c6\u5e93\u7684\u4e00\u4e2a\u5c0f\u5b50\u96c6\uff0c\u7ecf\u8fc7\u4f18\u5316\u4ee5\u5728\u5fae\u63a7\u5236\u5668\u548c\u53d7\u9650\u73af\u5883\u4e2d\u8fd0\u884c\u3002\u5b83\u88ab\u8bbe\u8ba1\u4e3a\u6613\u4e8e\u79fb\u690d\u5230\u65b0\u7684\u5fae\u63a7\u5236\u5668\u67b6\u6784\u3002MICROPYTHON \u662f\u4e00\u4e2a\u5b8c\u6574\u7684 Python \u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\uff0c\u8fd0\u884c\u5728\u5fae\u63a7\u5236\u5668\u786c\u4ef6\u4e0a\u3002\u5b83\u88ab\u8bbe\u8ba1\u4e3a\u6613\u4e8e\u4f7f\u7528\u548c\u7406\u89e3\uff0c\u7279\u522b\u9002\u5408\u5feb\u901f\u539f\u578b\u8bbe\u8ba1\u548c\u5f00\u53d1\u3002</p>"},{"location":"zh/ESP32/MICROPYTHON/micropython/#micropython_2","title":"MICROPYTHON \u7279\u6027","text":"<ul> <li>Python 3 \u8bed\u6cd5\uff1aMICROPYTHON \u57fa\u4e8e Python 3 \u8bed\u6cd5\uff0c\u6613\u4e8e\u5b66\u4e60\u548c\u4f7f\u7528\u3002</li> <li>\u4ea4\u4e92\u5f0f REPL\uff1aMICROPYTHON \u63d0\u4f9b\u4e00\u4e2a\u4ea4\u4e92\u5f0f REPL\uff08Read-Eval-Print Loop\uff09\u7528\u4e8e\u5feb\u901f\u6d4b\u8bd5\u548c\u8c03\u8bd5\u3002</li> <li>\u5fae\u63a7\u5236\u5668\u652f\u6301\uff1aMICROPYTHON \u652f\u6301\u591a\u79cd\u5fae\u63a7\u5236\u5668\u67b6\u6784\uff0c\u5305\u62ec ARM\u3001ESP32 \u548c ESP8266\u3002</li> <li>\u53ef\u6269\u5c55\u6a21\u5757\uff1aMICROPYTHON \u5141\u8bb8\u60a8\u901a\u8fc7\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6a21\u5757\u6765\u6269\u5c55\u5176\u529f\u80fd\u3002</li> <li>\u8de8\u5e73\u53f0\u652f\u6301\uff1aMICROPYTHON \u662f\u8de8\u5e73\u53f0\u7684\uff0c\u53ef\u4ee5\u5728 Windows\u3001macOS \u548c Linux \u4e0a\u8fd0\u884c\u3002</li> <li>\u5f00\u6e90\uff1aMICROPYTHON \u662f\u5f00\u6e90\u8f6f\u4ef6\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u81ea\u7531\u4fee\u6539\u548c\u5206\u53d1\u5b83\u3002</li> <li>\u793e\u533a\u652f\u6301\uff1aMICROPYTHON \u6709\u4e00\u4e2a\u5e9e\u5927\u6d3b\u8dc3\u7684\u793e\u533a\uff0c\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u652f\u6301\u548c\u8d44\u6e90\u3002</li> <li>\u5feb\u901f\u5f00\u53d1\uff1aMICROPYTHON \u53ef\u4ee5\u5feb\u901f\u539f\u578b\u8bbe\u8ba1\u548c\u5f00\u53d1\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u7269\u8054\u7f51\u5e94\u7528\u3002</li> <li>\u4f4e\u8d44\u6e90\u4f7f\u7528\uff1aMICROPYTHON \u8bbe\u8ba1\u7528\u4e8e\u5728\u8d44\u6e90\u6709\u9650\u7684\u5fae\u63a7\u5236\u5668\u4e0a\u8fd0\u884c\uff0c\u9002\u7528\u4e8e\u53d7\u9650\u73af\u5883\u3002</li> <li>\u5185\u7f6e\u5e93\uff1aMICROPYTHON \u5305\u542b\u4e00\u7ec4\u7528\u4e8e\u5e38\u89c1\u4efb\u52a1\u7684\u5185\u7f6e\u5e93\uff0c\u5982\u7f51\u7edc\u3001\u6587\u4ef6 I/O \u548c\u786c\u4ef6\u4ea4\u4e92\u3002</li> <li>\u53ef\u79fb\u690d\u6027\uff1aMICROPYTHON \u8bbe\u8ba1\u4e3a\u6613\u4e8e\u79fb\u690d\u5230\u65b0\u7684\u5fae\u63a7\u5236\u5668\u67b6\u6784\uff0c\u5141\u8bb8\u60a8\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u91cd\u7528\u60a8\u7684\u4ee3\u7801\u3002</li> <li>\u5185\u5b58\u7ba1\u7406\uff1aMICROPYTHON \u63d0\u4f9b\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\uff0c\u7b80\u5316\u4e86\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\u3002</li> <li>\u5783\u573e\u56de\u6536\uff1aMICROPYTHON \u5305\u542b\u4e00\u4e2a\u5783\u573e\u56de\u6536\u5668\uff0c\u81ea\u52a8\u56de\u6536\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\u3002</li> <li>\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\uff1aMICROPYTHON \u63d0\u4f9b\u786c\u4ef6\u62bd\u8c61\u5c42\uff0c\u5141\u8bb8\u60a8\u7f16\u5199\u5e73\u53f0\u65e0\u5173\u7684\u4ee3\u7801\u3002</li> <li>\u4f4e\u7ea7\u8bbf\u95ee\uff1aMICROPYTHON \u5141\u8bb8\u60a8\u76f4\u63a5\u8bbf\u95ee\u4f4e\u7ea7\u786c\u4ef6\u529f\u80fd\uff0c\u8ba9\u60a8\u66f4\u591a\u5730\u63a7\u5236\u786c\u4ef6\u3002</li> <li>\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08RTOS\uff09\u652f\u6301\uff1aMICROPYTHON \u652f\u6301\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5982 FreeRTOS\uff0c\u7528\u4e8e\u591a\u4efb\u52a1\u5904\u7406\u548c\u8c03\u5ea6\u3002</li> <li>\u56fa\u4ef6\u66f4\u65b0\uff1aMICROPYTHON \u5141\u8bb8\u60a8\u901a\u8fc7 Wi-Fi \u6216\u84dd\u7259\u65e0\u7ebf\u66f4\u65b0\u60a8\u7684\u5fae\u63a7\u5236\u5668\u56fa\u4ef6\u3002</li> </ul>"},{"location":"zh/ESP32/MICROPYTHON/micropython/#_1","title":"\u5b98\u65b9\u8d44\u6e90","text":"<ul> <li> <p> MICROPYTHON \u7f51\u7ad9</p> <p>Official website of MICROPYTHON.</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> MICROPYTHON GITHUB</p> <p>Official GitHub repository of MICROPYTHON.</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> MICROPYTHON \u6587\u6863</p> <p>Official documentation of MICROPYTHON.</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/MICROPYTHON/micropython/#_2","title":"\u4e09\u65b9\u8d44\u6e90","text":"<ul> <li> <p> \u666e\u4e2d\u79d1\u6280ESP32\u5f00\u53d1 \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/INSTRUCTIONS/instructions/","title":"\u9879\u76ee\u8bf4\u660e","text":"<p>Note</p> <p>\u672c\u6587\u6863\u8bb0\u5f55\u4e86\u5982\u4f55\u6784\u5efa\u8282\u70b9\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u8282\u70b9\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/","title":"\u9879\u76ee\u6846\u67b6","text":""},{"location":"zh/INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/#_2","title":"\u4ecb\u7ecd","text":"<p>\u9879\u76ee\u6846\u67b6</p> <p>\u5728\u5b8c\u6210\u9879\u76ee\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5bf9\u751f\u6210\u7684\u9879\u76ee\u8fdb\u884c\u91cd\u65b0\u7ec4\u7ec7\u548c\u6574\u7406\uff0c\u4ee5\u4f7f\u5f97\u5176\u66f4\u597d\u5730\u652f\u6491\u6211\u4eec\u7684\u9879\u76ee\u5f00\u53d1\u3002\u672c\u8282\u5c06\u4ecb\u7ecd\u5982\u4f55\u5bf9\u9879\u76ee\u8fdb\u884c\u91cd\u65b0\u7ec4\u7ec7\u548c\u6574\u7406\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/#_3","title":"\u9879\u76ee\u6846\u67b6","text":"<p>\u5728\u672c\u9879\u76ee\u4e2d\uff0c\u9879\u76ee\u4ee3\u7801\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>project-name/\n\u251c\u2500\u2500 CMakeLists.txt          # \u9879\u76ee\u9876\u5c42\u6784\u5efa\u6587\u4ef6\n\u251c\u2500\u2500 partitions-16MiB.csv    # \u5206\u533a\u8868\n\u251c\u2500\u2500 sdkconfig               # \u5f53\u524d\u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 sdkconfig.old           # \u65e7\u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 main/                   # \u4e3b\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # Main\u76ee\u5f55\u7684\u6784\u5efa\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 main.c              # \u4e3b\u5165\u53e3\u6587\u4ef6\n\u2502   \u2514\u2500\u2500 app/                # \u5e94\u7528\u903b\u8f91\u4ee3\u7801\n\u2502       \u251c\u2500\u2500 app.c           # \u5e94\u7528\u5c42\u903b\u8f91\n\u2502       \u251c\u2500\u2500 app.h           # \u5e94\u7528\u63a5\u53e3\u5b9a\u4e49\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 components/             # \u5916\u8bbe\u6a21\u5757\u76ee\u5f55\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # \u7ec4\u4ef6\u76ee\u5f55\u6784\u5efa\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 led/                # LED \u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 led.c\n\u2502   \u2502   \u251c\u2500\u2500 led.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 rgb/                # RGB \u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 rgb.c\n\u2502   \u2502   \u251c\u2500\u2500 rgb.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 sensor/             # \u4f20\u611f\u5668\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 sensor.c\n\u2502   \u2502   \u251c\u2500\u2500 sensor.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...                 # \u5176\u4ed6\u5916\u8bbe\u6a21\u5757\n\u251c\u2500\u2500 tinyshm/                # TinySHM \u6846\u67b6\u4ee3\u7801\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # TinySHM \u7684\u6784\u5efa\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 data_processing/    # \u6570\u636e\u5904\u7406\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 data_proc.c\n\u2502   \u2502   \u251c\u2500\u2500 data_proc.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 fault_detection/    # \u6545\u969c\u68c0\u6d4b\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 fault_detect.c\n\u2502   \u2502   \u251c\u2500\u2500 fault_detect.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 sensor_integration/ # \u4f20\u611f\u5668\u96c6\u6210\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 sensor_integ.c\n\u2502   \u2502   \u251c\u2500\u2500 sensor_integ.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...                 # \u5176\u4ed6\u6a21\u5757\n\u251c\u2500\u2500 build/                  # \u6784\u5efa\u76ee\u5f55\uff08\u81ea\u52a8\u751f\u6210\uff09\n\u2502   \u2514\u2500\u2500 ...                 # \u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u751f\u6210\u7684\u6587\u4ef6\n\u2514\u2500\u2500 README.md               # \u9879\u76ee\u7b80\u4ecb\u6587\u6863\nproject-name/\n\u251c\u2500\u2500 CMakeLists.txt          # \u9879\u76ee\u9876\u5c42\u6784\u5efa\u6587\u4ef6\n\u251c\u2500\u2500 partitions-16MiB.csv    # \u5206\u533a\u8868\n\u251c\u2500\u2500 sdkconfig               # \u5f53\u524d\u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 sdkconfig.old           # \u65e7\u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 main/                   # \u4e3b\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # Main\u76ee\u5f55\u7684\u6784\u5efa\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 main.c              # \u4e3b\u5165\u53e3\u6587\u4ef6\n\u2502   \u2514\u2500\u2500 app/                # \u5e94\u7528\u903b\u8f91\u4ee3\u7801\n\u2502       \u251c\u2500\u2500 app.c           # \u5e94\u7528\u5c42\u903b\u8f91\n\u2502       \u251c\u2500\u2500 app.h           # \u5e94\u7528\u63a5\u53e3\u5b9a\u4e49\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 components/             # \u5916\u8bbe\u6a21\u5757\u76ee\u5f55\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # \u7ec4\u4ef6\u76ee\u5f55\u6784\u5efa\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 led/                # LED \u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 led.c\n\u2502   \u2502   \u251c\u2500\u2500 led.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 rgb/                # RGB \u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 rgb.c\n\u2502   \u2502   \u251c\u2500\u2500 rgb.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 sensor/             # \u4f20\u611f\u5668\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 sensor.c\n\u2502   \u2502   \u251c\u2500\u2500 sensor.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...                 # \u5176\u4ed6\u5916\u8bbe\u6a21\u5757\n\u251c\u2500\u2500 tinyshm/                # TinySHM \u6846\u67b6\u4ee3\u7801\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # TinySHM \u7684\u6784\u5efa\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 data_processing/    # \u6570\u636e\u5904\u7406\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 data_proc.c\n\u2502   \u2502   \u251c\u2500\u2500 data_proc.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 fault_detection/    # \u6545\u969c\u68c0\u6d4b\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 fault_detect.c\n\u2502   \u2502   \u251c\u2500\u2500 fault_detect.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 sensor_integration/ # \u4f20\u611f\u5668\u96c6\u6210\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 sensor_integ.c\n\u2502   \u2502   \u251c\u2500\u2500 sensor_integ.h\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...                 # \u5176\u4ed6\u6a21\u5757\n\u251c\u2500\u2500 build/                  # \u6784\u5efa\u76ee\u5f55\uff08\u81ea\u52a8\u751f\u6210\uff09\n\u2502   \u2514\u2500\u2500 ...                 # \u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u751f\u6210\u7684\u6587\u4ef6\n\u2514\u2500\u2500 README.md               # \u9879\u76ee\u7b80\u4ecb\u6587\u6863\n</code></pre> <p>Note</p> <ul> <li>main \u6587\u4ef6\u5939\u4e0b\u662f\u4e3b\u7a0b\u5e8f\u4ee3\u7801\uff0c\u5305\u62ec\u5728\u5b50\u6587\u4ef6\u5939app\u4e2d\u7684\u5e94\u7528\u903b\u8f91\u4ee3\u7801\u3002</li> <li>components \u6587\u4ef6\u5939\u4e0b\u662f\u677f\u7ea7\u652f\u6301\u5305\uff0c\u5305\u62ec\u5404\u5916\u8bbe\u9a71\u52a8\uff0c\u9762\u5411\u5e95\u5c42\u3002</li> <li>tinyshm \u6587\u4ef6\u5939\u4e0b\u662f TinySHM \u6846\u67b6\u4ee3\u7801\uff0c \u5305\u62ec\u7ed9\u7c7b\u9762\u5411\u7ed3\u6784\u5065\u5eb7\u76d1\u6d4b\u8fb9\u7f18\u8ba1\u7b97\u7684\u5404\u6a21\u5757\uff0c\u9762\u5411\u9876\u5c42\u3002</li> <li>build \u6587\u4ef6\u5939\u662f\u7f16\u8bd1\u751f\u6210\u7684\u6587\u4ef6\u5939\uff0c\u5b58\u653e\u7f16\u8bd1\u751f\u6210\u7684\u6587\u4ef6\u3002 </li> </ul>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/","title":"\u9879\u76ee\u521d\u59cb\u5316","text":""},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_2","title":"\u73af\u5883\u51c6\u5907","text":"<p>Info</p> <p>\u6211\u4eec\u4f7f\u7528 VSCode + ESP-IDF \u8fdb\u884c\u5f00\u53d1\u3002\u6709\u5173\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u627e\u5230\u3002\u6211\u5047\u8bbe\u60a8\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u5f00\u53d1\u73af\u5883\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_3","title":"\u521b\u5efa\u65b0\u9879\u76ee","text":"<ol> <li>\u542f\u52a8 VSCode\uff0c\u7136\u540e\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u6253\u5f00\u547d\u4ee4\u9762\u677f\u3002</li> <li>\u8f93\u5165 <code>ESP-IDF: New Project</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI \u5e76\u586b\u5199\u6240\u9700\u4fe1\u606f\u3002 </li> <li>\u9009\u62e9\u4e00\u4e2a\u6a21\u677f\u6765\u521b\u5efa\u65b0\u9879\u76ee\u3002 </li> <li>\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00\u3002  </li> </ol>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_4","title":"\u6a21\u677f\u5316\u9879\u76ee\u7ed3\u6784","text":"<pre><code>sample_proj/ # \u9879\u76ee\u6839\u76ee\u5f55\n\u251c\u2500\u2500 CMakeLists.txt # \u9879\u76ee CMake \u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 main/ # \u4e3b\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # \u5e94\u7528\u7a0b\u5e8f CMake \u914d\u7f6e\u6587\u4ef6\n\u2502   \u2514\u2500\u2500 main.c # \u5e94\u7528\u7a0b\u5e8f\u6e90\u6587\u4ef6\n\u2514\u2500\u2500 sdkconfig # \u9879\u76ee\u914d\u7f6e\u6587\u4ef6\n</code></pre>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_5","title":"\u9879\u76ee\u914d\u7f6e","text":"<p>Note</p> <p>\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u914d\u7f6e\u9879\u76ee\u8bbe\u7f6e\u4ee5\u6700\u5927\u5316\u786c\u4ef6\u7684\u6027\u80fd\uff0c\u5373\u4f7f\u7528\u7279\u5b9a\u4e8e\u76ee\u6807\u7684\u914d\u7f6e\u800c\u4e0d\u662f\u9ed8\u8ba4\u914d\u7f6e\u3002</p> <p>Warning</p> <p>\u5728\u6253\u5f00\u9879\u76ee\u914d\u7f6e UI \u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5728 VSCode \u4e2d\u6253\u5f00\u4e86\u9879\u76ee\uff0c\u5c06\u76ee\u6807\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u677f\u5b50\uff0c\u5e76\u5b89\u88c5\u4e86 ESP-IDF \u6269\u5c55\u3002</p> <ol> <li>\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u5e76\u8f93\u5165 <code>ESP-IDF: Configure Project</code> \u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u70b9\u51fb VSCode \u7a97\u53e3\u5e95\u90e8\u83dc\u5355\u7684\u9f7f\u8f6e\u56fe\u6807\u3002 </li> <li>'FLASH' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>flash</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>'Partition Table' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>partition</code> \u5e76\u6309 <code>Enter</code>\u3002  \u8be6\u7ec6\u4fe1\u606f\u7a0d\u540e\u63d0\u4f9b</li> <li>'PSRAM' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>psram</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u66f4\u6539 CPU \u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>cpu</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06 CPU \u9891\u7387\u4fee\u6539\u4e3a 240 MHz\u3002 </li> <li>\u4fee\u6539 FreeRTOS tick \u65f6\u949f\u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>tick</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06\u9891\u7387\u4fee\u6539\u4e3a 1000\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u3002\u5728\u547d\u4ee4\u9762\u677f\u4e2d\u8f93\u5165 <code>ESP-IDF: Open Partition Table Editor UI</code>\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u5982\u4e0b\u6240\u793a\u3002 </li> <li>\u4fdd\u5b58\u6240\u6709\u4fee\u6539\u3002</li> </ol> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u9879\u76ee\u521d\u59cb\u5316\u3002\u914d\u7f6e\u4fe1\u606f\u73b0\u5728\u4e0e\u786c\u4ef6\u677f\u4e0a\u8d44\u6e90\u4e00\u81f4\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_6","title":"\u6a21\u677f\u7a0b\u5e8f","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u6d4b\u8bd5\u677f\u5b50\u3002</p> <p>\u8f6c\u5230 main.c \u6587\u4ef6\u5e76\u7528\u4ee5\u4e0b\u4ee3\u7801\u66ff\u6362\u5185\u5bb9\uff1a</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>\u7136\u540e\uff0c\u786e\u4fdd\u4e32\u53e3\u6b63\u786e\uff0c\u677f\u5b50\u8bbe\u7f6e\u6b63\u786e\uff0c\u7136\u540e\u7f16\u8bd1\u5e76\u70e7\u5f55\u7a0b\u5e8f\u3002\u7136\u540e\uff0c\u4f60\u5e94\u8be5\u4f1a\u770b\u5230\u4e32\u53e3\u8f93\u51fa\u663e\u793a\u5f00\u53d1\u677f\u4fe1\u606f\u548c <code>Hello-ESP32</code> \u6d88\u606f\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_7","title":"\u7ed3\u8bba","text":"<p>Note</p> <p>\u8fd9\u4e2a\u9879\u76ee\u5bf9DNESP32S3M\u6700\u5c0f\u7cfb\u7edf\u677f\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e3a\u540e\u7eed\u5f00\u53d1\u63d0\u4f9b\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u6a21\u677f\u3002\u76f8\u6bd4\u8f83\u4e0eSTM32\uff0cESP32\u7684\u5f00\u53d1\u9690\u85cf\u4e86\u8bb8\u591a\u7ec6\u8282\uff0c\u540c\u65f6\u4e5f\u4f7f\u5f97\u8bbe\u7f6e\u6d41\u7a0b\u66f4\u52a0\u7b80\u5355\u3002</p>"},{"location":"zh/INTERFACING/interfacing/","title":"\u4ea4\u4e92","text":""},{"location":"zh/INTERFACING/LED/led/#_1","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u672c\u7ae0\u6211\u4eec\u8bb2\u89e3DNESP32S3M\u5f00\u53d1\u677f\u4e0a\u7684\u677f\u8f7dLED\u706f\u7684\u9a71\u52a8\u548c\u63a7\u5236\u3002</p> <p></p>"},{"location":"zh/INTERFACING/LED/led/#_2","title":"\u6982\u89c8","text":"<p>\u6211\u4eec\u5728\u9879\u76ee\u4e2d\uff0c\u5728components\u76ee\u5f55\u4e0b\uff0c\u65b0\u5efa\u4e86\u4e00\u4e2aLED\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653eLED\u706f\u7684\u9a71\u52a8\u4ee3\u7801\uff0c\u5305\u62ecled.h\u548cled.c\u6587\u4ef6\u3002</p>"},{"location":"zh/INTERFACING/LED/led/#_3","title":"\u5f15\u811a\u914d\u7f6e","text":"<p>\u6839\u636e\u56fe\u7eb8\uff0c\u677f\u8f7dLED\u706f\u8fde\u63a5\u5230GPIO1\u3002</p> <p></p>"},{"location":"zh/INTERFACING/LED/led/#_4","title":"\u4ee3\u7801","text":""},{"location":"zh/INTERFACING/LED/led/#_5","title":"\u6838\u5fc3\u51fd\u6570","text":""},{"location":"zh/INTERFACING/RGB/rgb/","title":"RGB LED \u706f\u6a21\u5757","text":""},{"location":"zh/INTERFACING/RGB/rgb/#_1","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>RGB LED \u706f\u6a21\u5757\u662f\u4e00\u79cd\u96c6\u6210\u4e86\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u79cd\u989c\u8272\u7684 LED \u706f\u6a21\u5757\uff0c\u5bf9\u4e8e\u672c\u9879\u76ee\u4e3b\u63a7\u800c\u8a00\uff0c\u8be5\u6a21\u5757\u5c5e\u4e8e\u5916\u63a5\u6a21\u5757\u3002</p>"},{"location":"zh/INTERFACING/RGB/rgb/#overview","title":"Overview","text":"<p>\u6211\u4eec\u5728\u9879\u76eecomponents\u76ee\u5f55\u4e0b\uff0c\u65b0\u5efa\u4e86\u4e00\u4e2aRGB\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653eRGB LED\u706f\u7684\u9a71\u52a8\u4ee3\u7801\uff0c\u5305\u62ecrgb.h\u548crgb.c\u6587\u4ef6\u3002</p>"},{"location":"zh/INTERFACING/RGB/rgb/#_2","title":"\u5f15\u811a\u914d\u7f6e","text":"<p>\u7531\u4e8e\u662f\u5916\u63a5\u6a21\u5757\uff0c\u6ca1\u6709\u76f8\u5173\u56fe\u7eb8\uff0c\u8bf7\u53c2\u8003\u4ee5\u4e0b\u8868\u683c\u8fdb\u884c\u8fde\u7ebf\u3002</p> RGB LED \u6a21\u5757\u5f15\u811a \u4e3b\u63a7\u5f15\u811a/\u7535\u6e90 R GPIO_NUM_19 G GPIO_NUM_20 B GPIO_NUM_21 GND GND <p></p>"},{"location":"zh/INTERFACING/RGB/rgb/#_3","title":"\u4ee3\u7801","text":""},{"location":"zh/INTERFACING/RGB/rgb/#_4","title":"\u6838\u5fc3\u51fd\u6570","text":""},{"location":"zh/INTERFACING/RGB/rgb/#rgb_init","title":"rgb_init()","text":"<p>Note</p> <p>\u521d\u59cb\u5316RGB\u706f\u3002</p>"},{"location":"zh/INTERFACING/RGB/rgb/#rgbint-r-int-g-int-b","title":"rgb(int r, int g, int b)","text":"<p>Note</p> <p>\u63a7\u5236RGB\u706f\u3002</p>"},{"location":"zh/INTERFACING/RGB/rgb/#rgb_toggle","title":"rgb_toggle()","text":""},{"location":"zh/MAIN-CONTROL/HARDWARE/hardware/","title":"\u786c\u4ef6\u5e73\u53f0","text":"<p>DNESP32S3M</p> <p>\u672c\u6587\u6863\u4f7f\u7528\u7684\u786c\u4ef6\u5e73\u53f0\u4e3a\u6b63\u70b9\u539f\u5b50\u7684DNESP32S3M,\u57fa\u4e8eESP32-S3\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002\u76f8\u5173\u7a0b\u5e8f\u8fc1\u79fb\u5230\u5176\u4ed6\u5f00\u53d1\u677f\u5e94\u8be5\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u9002\u914d\u3002</p> <p></p> <p></p> <p>DNESP32S3M \u786c\u4ef6\u7279\u6027</p> <p>ESP32-S3 SoC \u82af\u7247\u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ul> <li> <p>2.4 GHz Wi-Fi</p> </li> <li> <p>\u4f4e\u529f\u8017\u84dd\u7259</p> </li> <li> <p>\u9ad8\u6027\u80fd Xtensa\u00ae 32 \u4f4d LX7 \u53cc\u6838\u5904\u7406\u5668</p> </li> <li> <p>\u8fd0\u884c RISC-V \u6216 FSM \u5185\u6838\u7684\u8d85\u4f4e\u529f\u8017\u534f\u5904\u7406\u5668</p> </li> <li> <p>\u591a\u79cd\u5916\u8bbe</p> </li> <li> <p>\u5185\u7f6e\u5b89\u5168\u786c\u4ef6</p> </li> <li> <p>USB OTG \u63a5\u53e3</p> </li> <li> <p>USB \u4e32\u53e3/JTAG \u63a7\u5236\u5668</p> </li> </ul> <p>ESP32-S3 \u91c7\u7528 40 nm \u5de5\u827a\u5236\u6210\uff0c\u5177\u6709\u6700\u4f73\u7684\u529f\u8017\u6027\u80fd\u3001\u5c04\u9891\u6027\u80fd\u3001\u7a33\u5b9a\u6027\u3001\u901a\u7528\u6027\u548c\u53ef\u9760\u6027\uff0c\u9002\u7528\u4e8e\u5404\u79cd\u5e94\u7528\u573a\u666f\u548c\u4e0d\u540c\u529f  \u8017\u9700\u6c42\u3002</p> <p>\u4e50\u946b\u4e3a\u7528\u6237\u63d0\u4f9b\u5b8c\u6574\u7684\u8f6f\u3001\u786c\u4ef6\u8d44\u6e90\uff0c\u8fdb\u884c ESP32-S3 \u786c\u4ef6\u8bbe\u5907\u7684\u5f00\u53d1\u3002\u5176\u4e2d\uff0c\u4e50\u946b\u7684\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883 ESP-IDF \u65e8\u5728\u534f\u52a9\u7528\u6237\u5feb \u901f\u5f00\u53d1\u7269\u8054\u7f51 (IoT) \u5e94\u7528\uff0c\u53ef\u6ee1\u8db3\u7528\u6237\u5bf9 Wi-Fi\u3001\u84dd\u7259\u3001\u4f4e\u529f\u8017\u7b49\u65b9\u9762\u7684\u8981\u6c42\u3002</p> <p></p> <p></p>"},{"location":"zh/PERCEPTION/perception/","title":"\u4f20\u611f","text":""}]}